use crate::adder::adder;

#[test]
fn half_adder_test() {
    assert_eq!(adder::half_adder(0, 0), [0, 0]);
    assert_eq!(adder::half_adder(0, 1), [0, 1]);
    assert_eq!(adder::half_adder(1, 0), [0, 1]);
    assert_eq!(adder::half_adder(1, 1), [1, 0]);
}

#[test]
fn full_adder_test() {
    assert_eq!(adder::full_adder(0, 0, 0), [0, 0]);
    assert_eq!(adder::full_adder(1, 0, 0), [0, 1]);
    assert_eq!(adder::full_adder(0, 1, 0), [0, 1]);
    assert_eq!(adder::full_adder(0, 0, 1), [0, 1]);
    assert_eq!(adder::full_adder(1, 1, 0), [1, 0]);
    assert_eq!(adder::full_adder(0, 1, 1), [1, 0]);
    assert_eq!(adder::full_adder(1, 0, 1), [1, 0]);
    assert_eq!(adder::full_adder(1, 1, 1), [1, 1]);
}

#[test]
fn add16_test() {
    assert_eq!(adder::add16([0; 16], [0; 16]), [0; 16]);
    assert_eq!(adder::add16([1; 16], [0; 16]), [1; 16]);
    assert_eq!(adder::add16([0; 16], [1; 16]), [1; 16]);
    assert_eq!(adder::add16([1; 16], [1; 16]), [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
}

#[test]
fn increment16_test() {
    assert_eq!(adder::increment16([0; 16]), [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    assert_eq!(adder::increment16([1; 16]), [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
}

#[test]
fn alu_test() {
    assert_eq!(adder::alu([0; 16], [1; 16], 1, 0, 1, 0, 1, 0), ([0; 16], 1, 0)); // 0
    assert_eq!(adder::alu([0; 16], [1; 16], 1, 1, 1, 1, 1, 1), ([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 0)); // 1
    assert_eq!(adder::alu([0; 16], [0; 16], 1, 1, 1, 0, 1, 0), ([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 0, 1)); // -1
    assert_eq!(adder::alu(  // x
        [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1; 16],
        0, 0, 1, 1, 0, 0),
        ([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 0, 1)
    );
    assert_eq!(adder::alu(  // y
        [1; 16],
        [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        1, 1, 0, 0, 0, 0),
        ([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 0, 1)
    );
    assert_eq!(adder::alu(  // not x
        [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1; 16],
        0, 0, 1, 1, 0, 1),
        ([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 0)
    );
    assert_eq!(adder::alu( // not y
        [1; 16],
        [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        1, 1, 0, 0, 0, 1),
        ([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 0)
    );
    assert_eq!(adder::alu(  // -x
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1; 16],
        0, 0, 1, 1, 1, 1),
        ([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 0)
    );
    assert_eq!(adder::alu(  // -y
        [1; 16],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        1, 1, 0, 0, 1, 1),
        ([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 0)
    );
    assert_eq!(adder::alu(  // x + 1
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0; 16],
        0, 1, 1, 1, 1, 1),
        ([1; 16], 0, 1)
    );
    assert_eq!(adder::alu(  // y + 1
        [0; 16],
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        1, 1, 0, 1, 1, 1),
        ([1; 16], 0, 1)
    );
    assert_eq!(adder::alu(  // x-1
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0; 16],
        0, 0, 1, 1, 1, 0),
        ([0; 16], 1, 0)
    );
    assert_eq!(adder::alu(  // y-1
        [0; 16],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        1, 1, 0, 0, 1, 0),
        ([0; 16], 1, 0)
    );
    assert_eq!(adder::alu(  // x+y
        [0; 16],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        0, 0, 0, 0, 1, 0),
        ([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 0)
    );
    assert_eq!(adder::alu(  // x-y
        [0; 16],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        0, 1, 0, 0, 1, 1),
        ([1; 16], 0, 1)
    );
    assert_eq!(adder::alu(  // x&y
        [1; 16],
        [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        0, 0, 0, 0, 0, 0),
        ([1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], 0, 1)
    );
    assert_eq!(adder::alu(  // x|y
        [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        0, 1, 0, 1, 0, 1),
        ([1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], 0, 1)
    );

}