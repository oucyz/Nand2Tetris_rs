use crate::logic::bool_logic;
// use crate::logic::bit::Bit;

#[test]
fn n_and_test() {
    assert_eq!(bool_logic::n_and(0, 0), 1);
    assert_eq!(bool_logic::n_and(0, 1), 1);
    assert_eq!(bool_logic::n_and(1, 0), 1);
    assert_eq!(bool_logic::n_and(1, 1), 0);
}

#[test]
fn not_test() {
    assert_eq!(bool_logic::not(0), 1);
    assert_eq!(bool_logic::not(1), 0);
}

#[test]
fn and_test() {
    assert_eq!(bool_logic::and(0, 0), 0);
    assert_eq!(bool_logic::and(0, 1), 0);
    assert_eq!(bool_logic::and(1, 0), 0);
    assert_eq!(bool_logic::and(1, 1), 1);
}

#[test]
fn or_test() {
    assert_eq!(bool_logic::or(0, 0), 0);
    assert_eq!(bool_logic::or(0, 1), 1);
    assert_eq!(bool_logic::or(1, 0), 1);
    assert_eq!(bool_logic::or(1, 1), 1);
}

#[test]
fn xor_test() {
    assert_eq!(bool_logic::xor(0, 0), 0);
    assert_eq!(bool_logic::xor(0, 1), 1);
    assert_eq!(bool_logic::xor(1, 0), 1);
    assert_eq!(bool_logic::xor(1, 1), 0);
}

#[test]
fn mux_test() {
    assert_eq!(bool_logic::mux(0, 0, 0), 0);
    assert_eq!(bool_logic::mux(0, 1, 0), 0);
    assert_eq!(bool_logic::mux(1, 0, 0), 1);
    assert_eq!(bool_logic::mux(1, 1, 0), 1);
    assert_eq!(bool_logic::mux(0, 0, 1), 0);
    assert_eq!(bool_logic::mux(0, 1, 1), 1);
    assert_eq!(bool_logic::mux(1, 0, 1), 0);
    assert_eq!(bool_logic::mux(1, 1, 1), 1);
}

#[test]
fn demux_test() {
    assert_eq!(bool_logic::demux(0, 0), [0, 0]);
    assert_eq!(bool_logic::demux(1, 0), [1, 0]);
    assert_eq!(bool_logic::demux(0, 1), [0, 0]);
    assert_eq!(bool_logic::demux(1, 1), [0, 1]);
}

#[test]
fn not16_test() {
    assert_eq!(bool_logic::not16(
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    );
    assert_eq!(bool_logic::not16(
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    );
    assert_eq!(bool_logic::not16(
        [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]),
        [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0],
    );
}

#[test]
fn and16_test() {
    assert_eq!(bool_logic::and16(
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    );
    assert_eq!(bool_logic::and16(
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    );
    assert_eq!(bool_logic::and16(
        [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]),
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
    );
}

#[test]
fn or16_test() {
    assert_eq!(bool_logic::or16(
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    );
    assert_eq!(bool_logic::or16(
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    );
    assert_eq!(bool_logic::or16(
        [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]),
        [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1],
    );
}

#[test]
fn or8way_test() {
    assert_eq!(bool_logic::or8way(
        [0, 0, 0, 0, 0, 0, 0, 0]),
        0,
    );
    assert_eq!(bool_logic::or8way(
        [1, 0, 0, 0, 0, 0, 0, 0]),
        1,
    );
    assert_eq!(bool_logic::or8way(
        [1, 1, 1, 1, 1, 1, 1, 1]),
        1,
    );
    assert_eq!(bool_logic::or8way(
        [1, 0, 0, 0, 0, 0, 0, 1]),
        1,
    );
}

#[test]
fn mux4way16_test() {
    assert_eq!(bool_logic::mux4way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [0, 0]),
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
    assert_eq!(bool_logic::mux4way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [1, 0]),
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
    assert_eq!(bool_logic::mux4way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [0, 1]),
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
    assert_eq!(bool_logic::mux4way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [1, 1]),
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
}

#[test]
fn mux8way16_test() {
    assert_eq!(bool_logic::mux8way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]],
        [0, 0, 0]),
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
    assert_eq!(bool_logic::mux8way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]],
        [1, 0, 0]),
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
    assert_eq!(bool_logic::mux8way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]],
        [0, 1, 0]),
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
    assert_eq!(bool_logic::mux8way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]],
        [1, 1, 0]),
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
    assert_eq!(bool_logic::mux8way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]],
        [0, 0, 1]),
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
    assert_eq!(bool_logic::mux8way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]],
        [1, 0, 1]),
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
    assert_eq!(bool_logic::mux8way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]],
        [0, 1, 1]),
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    );
    assert_eq!(bool_logic::mux8way16(
        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]],
        [1, 1, 1]),
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
    );
}

#[test]
fn demux4way_test() {
    assert_eq!(bool_logic::demux4way(0, [0, 0]), [0, 0, 0, 0]);
    assert_eq!(bool_logic::demux4way(1, [0, 0]), [1, 0, 0, 0]);
    assert_eq!(bool_logic::demux4way(0, [1, 0]), [0, 0, 0, 0]);
    assert_eq!(bool_logic::demux4way(1, [1, 0]), [0, 1, 0, 0]);
    assert_eq!(bool_logic::demux4way(0, [0, 1]), [0, 0, 0, 0]);
    assert_eq!(bool_logic::demux4way(1, [0, 1]), [0, 0, 1, 0]);
    assert_eq!(bool_logic::demux4way(0, [1, 1]), [0, 0, 0, 0]);
    assert_eq!(bool_logic::demux4way(1, [1, 1]), [0, 0, 0, 1]);
}

#[test]
fn demux8way_test() {
    assert_eq!(bool_logic::demux8way(0, [0, 0, 0]), [0, 0, 0, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(1, [0, 0, 0]), [1, 0, 0, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(0, [1, 0, 0]), [0, 0, 0, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(1, [1, 0, 0]), [0, 1, 0, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(0, [0, 1, 0]), [0, 0, 0, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(1, [0, 1, 0]), [0, 0, 1, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(0, [1, 1, 0]), [0, 0, 0, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(1, [1, 1, 0]), [0, 0, 0, 1, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(0, [0, 0, 1]), [0, 0, 0, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(1, [0, 0, 1]), [0, 0, 0, 0, 1, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(0, [1, 0, 1]), [0, 0, 0, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(1, [1, 0, 1]), [0, 0, 0, 0, 0, 1, 0, 0]);
    assert_eq!(bool_logic::demux8way(0, [0, 1, 1]), [0, 0, 0, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(1, [0, 1, 1]), [0, 0, 0, 0, 0, 0, 1, 0]);
    assert_eq!(bool_logic::demux8way(0, [1, 1, 1]), [0, 0, 0, 0, 0, 0, 0, 0]);
    assert_eq!(bool_logic::demux8way(1, [1, 1, 1]), [0, 0, 0, 0, 0, 0, 0, 1]);
}